-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\echo4\circular_buffer_delay.vhd
-- Created: 2021-03-07 17:24:45
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: circular_buffer_delay
-- Source Path: echo4/dataplane/echo/circular buffer delay
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY circular_buffer_delay IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        signal_in                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        delay                             :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        signal_out                        :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END circular_buffer_delay;


ARCHITECTURE rtl OF circular_buffer_delay IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT DualRateDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          din_A                           :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr_A                          :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we_A                            :   IN    std_logic;
          din_B                           :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr_B                          :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we_B                            :   IN    std_logic;
          doutA                           :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          doutB                           :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
--   FOR ALL : DualRateDualPortRAM_generic
--     USE ENTITY work.DualRateDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL Counter_Free_Running_out1        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL always_write_a_out1              : std_logic;
  SIGNAL Constant_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL delay_unsigned                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Subtract_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL always_read_b_out1               : std_logic;
  SIGNAL Dual_Rate_Dual_Port_RAM_out1     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Dual_Rate_Dual_Port_RAM_out2     : std_logic_vector(23 DOWNTO 0);  -- ufix24

BEGIN
  u_Dual_Rate_Dual_Port_RAM : DualRateDualPortRAM_generic
    GENERIC MAP( AddrWidth => 16,
                 DataWidth => 24
                 )
    PORT MAP( clk => clk,
              enb_1_2048_0 => enb_1_2048_0,
              din_A => signal_in,
              addr_A => std_logic_vector(Counter_Free_Running_out1),
              we_A => always_write_a_out1,
              din_B => std_logic_vector(Constant_out1),
              addr_B => std_logic_vector(Subtract_out1),
              we_B => always_read_b_out1,
              doutA => Dual_Rate_Dual_Port_RAM_out1,
              doutB => Dual_Rate_Dual_Port_RAM_out2
              );

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Counter_Free_Running_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Free_Running_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        Counter_Free_Running_out1 <= Counter_Free_Running_out1 + to_unsigned(16#0001#, 16);
      END IF;
    END IF;
  END PROCESS Counter_Free_Running_process;


  always_write_a_out1 <= '1';

  Constant_out1 <= to_signed(16#000000#, 24);

  delay_unsigned <= unsigned(delay);

  Subtract_out1 <= Counter_Free_Running_out1 - delay_unsigned;

  always_read_b_out1 <= '0';

  signal_out <= Dual_Rate_Dual_Port_RAM_out2;

END rtl;

